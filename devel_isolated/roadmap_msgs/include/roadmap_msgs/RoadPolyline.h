// Generated by gencpp from file roadmap_msgs/RoadPolyline.msg
// DO NOT EDIT!


#ifndef ROADMAP_MSGS_MESSAGE_ROADPOLYLINE_H
#define ROADMAP_MSGS_MESSAGE_ROADPOLYLINE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace roadmap_msgs
{
template <class ContainerAllocator>
struct RoadPolyline_
{
  typedef RoadPolyline_<ContainerAllocator> Type;

  RoadPolyline_()
    : id(0)
    , type(0)
    , coords()  {
    }
  RoadPolyline_(const ContainerAllocator& _alloc)
    : id(0)
    , type(0)
    , coords(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _coords_type;
  _coords_type coords;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LANECENTER_FREEWAY)
  #undef LANECENTER_FREEWAY
#endif
#if defined(_WIN32) && defined(LANECENTER_SURFACESTREET)
  #undef LANECENTER_SURFACESTREET
#endif
#if defined(_WIN32) && defined(LANECENTER_BIKELANE)
  #undef LANECENTER_BIKELANE
#endif
#if defined(_WIN32) && defined(ROADLINE_BROKENSINGLEWHITE)
  #undef ROADLINE_BROKENSINGLEWHITE
#endif
#if defined(_WIN32) && defined(ROADLINE_SOLIDSINGLEWHITE)
  #undef ROADLINE_SOLIDSINGLEWHITE
#endif
#if defined(_WIN32) && defined(ROADLINE_SOLIDDOUBLEWHITE)
  #undef ROADLINE_SOLIDDOUBLEWHITE
#endif
#if defined(_WIN32) && defined(ROADLINE_BROKENSINGLEYELLOW)
  #undef ROADLINE_BROKENSINGLEYELLOW
#endif
#if defined(_WIN32) && defined(ROADLINE_BROKENDOUBLEYELLOW)
  #undef ROADLINE_BROKENDOUBLEYELLOW
#endif
#if defined(_WIN32) && defined(ROADLINE_SOLIDSINGLEYELLOW)
  #undef ROADLINE_SOLIDSINGLEYELLOW
#endif
#if defined(_WIN32) && defined(ROADLINE_SOLIDDOUBLEYELLOW)
  #undef ROADLINE_SOLIDDOUBLEYELLOW
#endif
#if defined(_WIN32) && defined(ROADLINE_PASSINGDOUBLEYELLOW)
  #undef ROADLINE_PASSINGDOUBLEYELLOW
#endif
#if defined(_WIN32) && defined(ROADEDGEBOUNDARY)
  #undef ROADEDGEBOUNDARY
#endif
#if defined(_WIN32) && defined(ROADEDGEMEDIAN)
  #undef ROADEDGEMEDIAN
#endif
#if defined(_WIN32) && defined(STOPSIGN)
  #undef STOPSIGN
#endif
#if defined(_WIN32) && defined(CROSSWALK)
  #undef CROSSWALK
#endif
#if defined(_WIN32) && defined(SPEEDBUMP)
  #undef SPEEDBUMP
#endif

  enum {
    LANECENTER_FREEWAY = 1u,
    LANECENTER_SURFACESTREET = 2u,
    LANECENTER_BIKELANE = 3u,
    ROADLINE_BROKENSINGLEWHITE = 6u,
    ROADLINE_SOLIDSINGLEWHITE = 7u,
    ROADLINE_SOLIDDOUBLEWHITE = 8u,
    ROADLINE_BROKENSINGLEYELLOW = 9u,
    ROADLINE_BROKENDOUBLEYELLOW = 10u,
    ROADLINE_SOLIDSINGLEYELLOW = 11u,
    ROADLINE_SOLIDDOUBLEYELLOW = 12u,
    ROADLINE_PASSINGDOUBLEYELLOW = 13u,
    ROADEDGEBOUNDARY = 15u,
    ROADEDGEMEDIAN = 16u,
    STOPSIGN = 17u,
    CROSSWALK = 18u,
    SPEEDBUMP = 19u,
  };


  typedef boost::shared_ptr< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> const> ConstPtr;

}; // struct RoadPolyline_

typedef ::roadmap_msgs::RoadPolyline_<std::allocator<void> > RoadPolyline;

typedef boost::shared_ptr< ::roadmap_msgs::RoadPolyline > RoadPolylinePtr;
typedef boost::shared_ptr< ::roadmap_msgs::RoadPolyline const> RoadPolylineConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roadmap_msgs::RoadPolyline_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roadmap_msgs::RoadPolyline_<ContainerAllocator1> & lhs, const ::roadmap_msgs::RoadPolyline_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.coords == rhs.coords;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roadmap_msgs::RoadPolyline_<ContainerAllocator1> & lhs, const ::roadmap_msgs::RoadPolyline_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roadmap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "35f06eaee5fd980da3b6582143b5a629";
  }

  static const char* value(const ::roadmap_msgs::RoadPolyline_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x35f06eaee5fd980dULL;
  static const uint64_t static_value2 = 0xa3b6582143b5a629ULL;
};

template<class ContainerAllocator>
struct DataType< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roadmap_msgs/RoadPolyline";
  }

  static const char* value(const ::roadmap_msgs::RoadPolyline_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Road line identifier\n"
"int32 id\n"
"\n"
"# Type of road line \n"
"uint8 LANECENTER_FREEWAY=1\n"
"uint8 LANECENTER_SURFACESTREET=2\n"
"uint8 LANECENTER_BIKELANE=3\n"
"uint8 ROADLINE_BROKENSINGLEWHITE=6\n"
"uint8 ROADLINE_SOLIDSINGLEWHITE=7\n"
"uint8 ROADLINE_SOLIDDOUBLEWHITE=8\n"
"uint8 ROADLINE_BROKENSINGLEYELLOW=9\n"
"uint8 ROADLINE_BROKENDOUBLEYELLOW=10\n"
"uint8 ROADLINE_SOLIDSINGLEYELLOW=11\n"
"uint8 ROADLINE_SOLIDDOUBLEYELLOW=12\n"
"uint8 ROADLINE_PASSINGDOUBLEYELLOW=13\n"
"uint8 ROADEDGEBOUNDARY=15\n"
"uint8 ROADEDGEMEDIAN=16\n"
"uint8 STOPSIGN=17\n"
"uint8 CROSSWALK=18\n"
"uint8 SPEEDBUMP=19\n"
"\n"
"uint8 type\n"
"\n"
"# Polyline coordinates\n"
"geometry_msgs/Point[] coords\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roadmap_msgs::RoadPolyline_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.coords);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadPolyline_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roadmap_msgs::RoadPolyline_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "coords[]" << std::endl;
    for (size_t i = 0; i < v.coords.size(); ++i)
    {
      s << indent << "  coords[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.coords[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROADMAP_MSGS_MESSAGE_ROADPOLYLINE_H
