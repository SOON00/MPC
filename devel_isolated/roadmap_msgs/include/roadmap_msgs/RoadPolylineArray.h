// Generated by gencpp from file roadmap_msgs/RoadPolylineArray.msg
// DO NOT EDIT!


#ifndef ROADMAP_MSGS_MESSAGE_ROADPOLYLINEARRAY_H
#define ROADMAP_MSGS_MESSAGE_ROADPOLYLINEARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <roadmap_msgs/RoadPolyline.h>

namespace roadmap_msgs
{
template <class ContainerAllocator>
struct RoadPolylineArray_
{
  typedef RoadPolylineArray_<ContainerAllocator> Type;

  RoadPolylineArray_()
    : header()
    , road_polylines()  {
    }
  RoadPolylineArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , road_polylines(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >> _road_polylines_type;
  _road_polylines_type road_polylines;





  typedef boost::shared_ptr< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> const> ConstPtr;

}; // struct RoadPolylineArray_

typedef ::roadmap_msgs::RoadPolylineArray_<std::allocator<void> > RoadPolylineArray;

typedef boost::shared_ptr< ::roadmap_msgs::RoadPolylineArray > RoadPolylineArrayPtr;
typedef boost::shared_ptr< ::roadmap_msgs::RoadPolylineArray const> RoadPolylineArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator1> & lhs, const ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.road_polylines == rhs.road_polylines;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator1> & lhs, const ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roadmap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4ef0cc5f23352e54e8abcc0a04846779";
  }

  static const char* value(const ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4ef0cc5f23352e54ULL;
  static const uint64_t static_value2 = 0xe8abcc0a04846779ULL;
};

template<class ContainerAllocator>
struct DataType< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roadmap_msgs/RoadPolylineArray";
  }

  static const char* value(const ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"roadmap_msgs/RoadPolyline[] road_polylines\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: roadmap_msgs/RoadPolyline\n"
"# Road line identifier\n"
"int32 id\n"
"\n"
"# Type of road line \n"
"uint8 LANECENTER_FREEWAY=1\n"
"uint8 LANECENTER_SURFACESTREET=2\n"
"uint8 LANECENTER_BIKELANE=3\n"
"uint8 ROADLINE_BROKENSINGLEWHITE=6\n"
"uint8 ROADLINE_SOLIDSINGLEWHITE=7\n"
"uint8 ROADLINE_SOLIDDOUBLEWHITE=8\n"
"uint8 ROADLINE_BROKENSINGLEYELLOW=9\n"
"uint8 ROADLINE_BROKENDOUBLEYELLOW=10\n"
"uint8 ROADLINE_SOLIDSINGLEYELLOW=11\n"
"uint8 ROADLINE_SOLIDDOUBLEYELLOW=12\n"
"uint8 ROADLINE_PASSINGDOUBLEYELLOW=13\n"
"uint8 ROADEDGEBOUNDARY=15\n"
"uint8 ROADEDGEMEDIAN=16\n"
"uint8 STOPSIGN=17\n"
"uint8 CROSSWALK=18\n"
"uint8 SPEEDBUMP=19\n"
"\n"
"uint8 type\n"
"\n"
"# Polyline coordinates\n"
"geometry_msgs/Point[] coords\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.road_polylines);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadPolylineArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roadmap_msgs::RoadPolylineArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "road_polylines[]" << std::endl;
    for (size_t i = 0; i < v.road_polylines.size(); ++i)
    {
      s << indent << "  road_polylines[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::roadmap_msgs::RoadPolyline_<ContainerAllocator> >::stream(s, indent + "    ", v.road_polylines[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROADMAP_MSGS_MESSAGE_ROADPOLYLINEARRAY_H
